using System.Collections;
using System.Collections.Generic;
using UnityEngine;

public class ObstacleCreate : MonoBehaviour
{
    List<GameObject> Prefabs = new List<GameObject>();

    public GameObject prefabAntfriend;
    public GameObject prefabWorm;
    public GameObject prefabBark;
    public GameObject prefabHole;

    //public float mintime = 5.0f; //중간에 랜덤으로 나오게 할때 최소 시간 간격
    //public float maxtime = 7.0f; //중간에 랜덤으로 나오게 할때 최대 시간 간격

    public float ltx = -12.0f; //x좌표 왼쪽 위치
    public float rtx = -14.0f; //x좌표 오른쪽 위치

    public float miny = 3.0f; //y좌표 최소 위치
    public float maxy = 36.0f; //y좌표 최대 위치

    public float rz = 6.1f; //z좌표값 고정
    List<float> rx = new List<float>(); //x좌표값들
    List<int> ry = new List<int>();    //y좌표값들

    public int num = 12; //장애물 개수

    Vector3 limitMin, limitMax; //Gizmos 표현하기 위한 좌표값

    void Start()
    {
        //장애물의 종류가 랜덤으로 선택되도록 Prefabs 리스트에 장애물프리팹 추가
        GameObject _obj = prefabAntfriend as GameObject;
        Prefabs.Add(_obj);
        _obj = prefabWorm as GameObject;
        Prefabs.Add(_obj);
        _obj = prefabBark as GameObject;
        Prefabs.Add(_obj);
        _obj = prefabHole as GameObject;
        Prefabs.Add(_obj);

        int prefab_leng = Prefabs.Count;

        //x좌표 추가
        rx.Add(ltx);
        rx.Add(rtx);

        //y좌표 추가 위아래 간격이 있어야 개미가 이동가능하므로 3으로 간격줌
        for (int i = 3; i <= 36; i+=3)
        {
            ry.Add(i);
        }
        
        //StartCoroutine(CreateBark()); //중간에 랜덤으로 생성되게 하는 코드


        //처음 시작 시 랜덤으로 num개수만큼 장애물 나옴
        for (int i = 0; i < num; i++)
        {
            int x_id = Random.Range(0, 2);
            int y_id = Random.Range(0, ry.Count);

            Vector3 creatingPoint = new Vector3(rx[x_id], ry[y_id], rz);

            int prefab_id = Random.Range(0, prefab_leng);

            //Antfiend가 가로로 눕히는 과정에서 나무 밖으로 빗겨나가므로 수동으로 x좌표값 추가
            if(prefab_id==0)
            {
                creatingPoint = new Vector3(rx[x_id]+0.5f, ry[y_id], rz);
            }

            Instantiate(Prefabs[prefab_id], creatingPoint, Quaternion.identity);

            //y좌표값 중복 방지
            ry.Remove(ry[y_id]);
        }
    }
    /* //게임 중간에 랜덤으로 나왔다 사라지고 나왔다 사라지는 코드
    IEnumerator CreateBark()
    {
        while (true)
        {
            for (int i = 0; i < 4; i++)
            {
                int x_id = Random.Range(0, 2);
                int y_id = Random.Range(0, ry.Count);

                Vector3 creatingPoint = new Vector3(rx[x_id], ry[y_id], rz);


                int prefab_id = Random.Range(0, 4);

                if (prefab_id == 0)
                {
                    creatingPoint = new Vector3(rx[x_id] + 0.5f, ry[y_id], rz);
                }

                Instantiate(Prefabs[prefab_id], creatingPoint, Quaternion.identity);

                ry.Remove(ry[y_id]);
            }

            float creatingTime = Random.Range(mintime, maxtime);
            yield return new WaitForSeconds(creatingTime);
        }
    }*/
    
    private void OnDrawGizmos()
    {
        Gizmos.color = Color.blue;
        limitMin = new Vector3(ltx, miny, rz);
        limitMax = new Vector3(ltx, maxy, rz);
        Gizmos.DrawLine(limitMin, limitMax);
        limitMin = new Vector3(rtx, miny, rz);
        limitMax = new Vector3(rtx, maxy, rz);
        Gizmos.DrawLine(limitMin, limitMax);
    }
}
